RRDBUILD(1)                         rrdtool                        RRDBUILD(1)



NNAAMMEE
       rrdbuild - Instructions for building RRDtool

OOVVEERRVVIIEEWW
       If you downloaded the source of rrdtool you have to compile it. This
       document will give some information on how this is done.

       RRDtool relies on services of thrid part libraries. Some of these
       libraries may already be installed on your system. You have to compile
       copies of the other ones before you can build RRDtool.

       This document will tell you about all the necessary steps to get going.

       These instructions assume you are using a bbaasshh shell. If you use
       csh/tcsh, then you can either type _b_a_s_h to switch to bash for the com-
       pilation or if you know what you are doing just replace the export bits
       with setenv.

       We further assume that your copies of ttaarr and mmaakkee are actually GGNNUU ttaarr
       and GGNNUU mmaakkee respectively. It could be that they are installed as ggttaarr
       and ggmmaakkee on your system.

OOPPTTIIMMIISSTTIICC BBUUIILLDD
       Before you start to build RRDtool, you have to decide two things:

       1.  In which directory you want to build the software.

       2.  Where you want to install the software.

       Once you have decided. Save the two locations into environment vari-
       ables.

        BUILD_DIR=/tmp/rrdbuild
        INSTALL_DIR=/usr/local/rrdtool-1.3rc6

       If your _/_t_m_p is mounted with the option noexec (RHEL seems todo that)
       you have to choose a different directory!

       Now make sure the BUILD_DIR exists and go there:

        mkdir -p $BUILD_DIR
        cd $BUILD_DIR

       Lets first assume you already have all the necessary libraries
       pre-installed.

        wget http://oss.oetiker.ch/rrdtool/pub/rrdtool-1.3rc6.tar.gz
        gunzip -c rrdtool-1.3rc6.tar.gz | tar xf -
        cd rrdtool-1.3rc6
        ./configure --prefix=$INSTALL_DIR && make && make install

       Ok, this was very optimistic. This try will probably have ended with
       ccoonnffiigguurree complaining about several missing libraries.

IINNSSTTAALLLLIINNGG DDEEPPEENNDDEENNCCIIEESS
       If your OS lets you install additional packages from a software reposi-
       tory, you may get away with installing the missing packages. When the
       packages are installed, run configure again and try to compile again.
       Below you find some hints on getting your OS ready for the rrdtool com-
       pilation. Additions to this list are welcome.

       OOppeennSSoollaarriiss 22000088..0055

       Just add a compiler and the gnome development package:

        pkg install sunstudioexpress
        pkg install SUNWgnome-common-devel

       There is a a problem with _c_a_i_r_o_._p_c on opensolaris. It suggests that
       xrender is required for compilation with cairo. This is not true and
       also bad since opensolaris does not include an _x_r_e_n_d_e_r_._p_c file. Use
       perl to fix this:

        perl -i~ -p -e 's/(Requires.*?)\s*xrender.*/$1/' /usr/lib/pkgconfig/cairo.pc

       DDeebbiiaann // UUbbuunnttuu

       Use apt-get to make sure you have all that is required. A number of
       packages will get added through dependencies.

        apt-get install libpango1.0-dev libxml2-dev

BBUUIILLDDIINNGG DDEEPPEENNDDEENNCCIIEESS
       But again this may have been too optimistic still, and you actually
       have to compile your own copies of some of the required libraries.
       Things like libpng and zlib are pretty standard so you will probably
       have them on your system anyway. Freetype, Fontinst, Cairo, Pango may
       be installed, but it is possible that they are pretty old and thus
       don't live up to the expectations, so you may want to compile their
       latest versions.

       _B_u_i_l_d _T_i_p_p_s _f_o_r _A_I_X

       If you are woking with AIX, you may find the the ----ddiissaabbllee--sshhaarreedd
       option will cause things to break for you. In that case you may have to
       install the shared libraries into the rrdtool PREFIX and work with
       ----ddiissaabbllee--ssttaattiicc instead.

       Another hint to get rrdtool working on AIX is to use the IBM XL C Com-
       piler:

        export CC=/usr/vac/bin/cc
        export PERLCC=$CC

       (Better instructions for AIX welcome!)

       BBuuiillddiinngg LLiibbrraarriieess

       In order to build the libraries you need a compiler on your system.
       Unfortunately compilers are not all alike. This has an effect on the
       CFLAGS you want to set. The examples below are for the popular GCC com-
       piler suite.  If you have an other compile you have to use the follow-
       ing settings:

       Sun Forte
            CFLAGS="-xO3 -kPIC"

           Some libraries want to know where other libraries are. For this to
           work, set the following environamen variable

            export PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig
            export PATH=$INSTALL_DIR/bin:$PATH

           Since we are compiling libraries dynamically, you they must further
           know where to find each other. This is done by setting an appropri-
           ate LDFLAG.  Unfortunatly the syntax differs from system to system:

           Solaris
                export LDFLAGS=-R${INSTALL_DIR}/lib

           Linux
                export LDFLAGS="-Wl,--rpath -Wl,${INSTALL_DIR}/lib"

               If you are on a 64bit platform, but would like to continue to
               use the rrd files created on your old 32bit linux, you may be
               able

           HPUX
                export LDFLAGS="+b${INSTALL_DIR}/lib"

           AIX
                export LDFLAGS="-Wl,-blibpath:${INSTALL_DIR}/lib"

           If you have GNUmake installed and it is not called 'make', then do

            export MAKE=gmake
            export GNUMAKE=gmake

           otherwhise just do

            export MAKE=make

       Building zlib
           Chances are very high that you already have that on your system ...

            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/zlib-1.2.3.tar.gz
            gunzip -c zlib-1.2.3.tar.gz | tar xf -
            cd zlib-1.2.3
            ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC" --shared
            $MAKE
            $MAKE install

       Building libpng
           Libpng itself requires zlib to build, so we need to help a bit. If
           you already have a copy of zlib on your system (which is very lik-
           ley) you can drop the settings of LDFLAGS and CPPFLAGS. Note that
           the backslash (\) at the end of line 4 means that line 4 and line 5
           are on one line.

            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/libpng-1.2.18.tar.gz
            gunzip -c libpng-1.2.18.tar.gz | tar xf -
            cd libpng-1.2.10
            env CFLAGS="-O3 -fPIC" ./configure --prefix=$INSTALL_DIR
            $MAKE
            $MAKE install

       Building freetype
            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/freetype-2.3.5.tar.gz
            gunzip -c freetype-2.3.5.tar.gz | tar xf -
            cd freetype-2.3.5
            ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
            $MAKE
            $MAKE install

           If you run into problems building freetype on Solaris, you may want
           to try to add the following at the start the configure line:

            env EGREP=egrep

       Building LibXML2
            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/libxml2-sources-2.6.31.tar.gz
            gunzip -c libxml2-sources-2.6.32.tar.gz | tar xf -
            cd libxml2-sources-2.6.32
            ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
            $MAKE
            $MAKE install

       Building fontconfig
           Note that fontconfig has a runtime configuration file in
           INSTALL_DIR/etc you may want to adjust that so that fontconfig
           finds the fonts on your system.  Run the fc-cache program to build
           the fontconfig cache after changeing the config file.

            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/fontconfig-2.4.2.tar.gz
            gunzip -c fontconfig-2.4.2.tar.gz   | tar xf -
            cd fontconfig-2.4.2
            ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
            $MAKE
            $MAKE install

       Building Pixman
            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/pixman-0.10.0.tar.gz
            gunzip -c pixman-0.10.0.tar.gz  | tar xf -
            cd fontconfig-2.4.2
            ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
            $MAKE
            $MAKE install

       Building Cairo
            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/cairo-1.6.4.tar.gz
            gunzip -c cairo-1.4.10.tar.gz   | tar xf -
            cd cairo-1.4.10
            ./configure --prefix=$INSTALL_DIR \
               --enable-xlib=no \
               --enable-xlib-render=no \
               --enable-win32=no \
               CFLAGS="-O3 -fPIC"
            $MAKE
            $MAKE install

       Building Glib
            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/glib-2.15.4.tar.gz
            gunzip -c glib-2.12.13.tar.gz  | tar xf -
            cd glib-2.12.13
            ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC"
            $MAKE
            $MAKE install

       Building Pango
            cd $BUILD_DIR
            wget http://oss.oetiker.ch/rrdtool/pub/libs/pango-1.21.1.tar.gz
            gunzip -c pango-1.21.1.tar.gz  | tar xf -
            cd pango-1.21.1
            ./configure --prefix=$INSTALL_DIR CFLAGS="-O3 -fPIC" --without-x
            $MAKE
            $MAKE install

       Now all the dependent libraries are built and you can try again. This
       time you tell configure where it should be looking for libraries and
       include files. This is done via environment variables. Depending on the
       shell you are running, the syntax for setting environment variables is
       different.

       And finally try building again. We disable the python and tcl bindings
       because it seems that a fair number of people have ill configured
       python and tcl setups that would prevent rrdtool from building if they
       are included in their current state.

        cd $BUILD_DIR/rrdtool-1.3rc6
        ./configure --prefix=$INSTALL_DIR --disable-tcl --disable-python
        $MAKE clean
        $MAKE
        $MAKE install

       SOLARIS HINT: if you want to build  the perl module for the native perl
       (the one shipping with solaris) you will need the sun forte compiler
       installed on your box or you have to hand-tune bind-
       ings/perl-shared/Makefile while building!

       Now go to _$_I_N_S_T_A_L_L___D_I_R//sshhaarree//rrrrddttooooll//eexxaammpplleess// and run them to see if
       your build has been successful.

AAUUTTHHOORR
       Tobias Oetiker <tobi@oetiker.ch>



1.3rc6                            2008-05-26                       RRDBUILD(1)
